@function mat-color($palette, $hue: default, $opacity: null) {
    // If hueKey is a number between zero and one, then it actually contains an
    // opacity value, so recall this function with the default hue and that given opacity.
    @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
        @return mat-color($palette, default, $hue);
    }

    $color: map-get($palette, $hue);
    $opacity: if($opacity == null, opacity($color), $opacity);

    @return rgba($color, $opacity);
}

$default-pixel: 16;
@function rem-cal($target-pixel) {
    @return $target-pixel/$default-pixel + rem;
}

@mixin aspect-ratio-update($width, $height) {
    &:before {
        padding-top: ($height / $width) * 100%;
    }
}

@mixin aspect-ratio($width, $height) {
    position: relative;
    &:before {
        display: block;
        content: "";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }
    > * {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}

@mixin border-radius($radius) {
    border-radius: $radius;
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
}

@mixin opacity($value) {
    $IEValue: $value * 100;
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $IEValue + ")";
    filter: alpha(opacity=$IEValue);
}

// Adds shadow to a box
@mixin box-shadow($arguments...) {
    -o-box-shadow: $arguments;
    box-shadow: $arguments;
}

@function to-number($value) {
    @if type-of($value) == "number" {
        @return $value;
    } @else if type-of($value) != "string" {
        $_: log("Value for `to-number` should be a number or a string.");
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == "-";
    $numbers: (
            "0": 0,
            "1": 1,
            "2": 2,
            "3": 3,
            "4": 4,
            "5": 5,
            "6": 6,
            "7": 7,
            "8": 8,
            "9": 9
    );

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if not(index(map-keys($numbers), $character) or $character == ".") {
            @return to-length(if($minus, -$result, $result), str-slice($value, $i));
        }

        @if $character == "." {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map-get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

// Define vertical, horizontal, or both position
@mixin center($position) {
    position: absolute;

    @if $position == 'vertical' {
        top: 50%;
        -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
        transform: translateY(-50%);
    } @else if $position == 'horizontal' {
        left: 50%;
        -webkit-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
        transform: translate(-50%);
    } @else if $position == 'both' {
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
}

@mixin placeholder {
    /* WebKit browsers */
    &::-webkit-input-placeholder {
        @content
    }
    /* Mozilla Firefox 4 to 18 */
    &:-moz-placeholder {
        @content
    }
    /* Mozilla Firefox 19+ */
    &::-moz-placeholder {
        @content
    }
    /* Internet Explorer 10+ */
    &:-ms-input-placeholder {
        @content
    }
    &::placeholder {
        @content
    }
}

// Flex Center Alignment
@mixin flex-center($alignment: ""){
    @if unquote($alignment) == "align-center"{
        display: flex;
        align-items: center;
    } @else if unquote($alignment) == "justify-center"{
        display: flex;
        justify-content: center;
    } @else {
        display: flex;
        align-items: center;
        justify-content: center;
    }
}